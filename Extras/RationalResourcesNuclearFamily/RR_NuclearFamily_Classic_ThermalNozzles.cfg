@PART:HAS[#RRTN[Yes],@MODULE[ModuleEngines*],!MODULE[MultiModeEngine]]:NEEDS[ClassicStock,!CommunityResourcePack]:FOR[RationalResourcesNuclearFamily]
{
	@description ^= :$: <br><#fc5a50>RR Thermal Nozzle.</color> // Dark Magenta
	@RRTN = Joined
	@tags ^= :$: cck-rr
	
	IspVac = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	Isp3rd = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,2[1, ]$
	IspMult = #$IspVac$ // set numerator for div operation
	@IspMult /= 800 // denominator, the lowest vac Isp number among all targeted parts
	
	// precision sequence to keep div number at 2dp and not let it be 12+dp
	@IspMult += 0.005
	@IspMult *= 100
	@IspMult = #$IspMult[0,.]$ // regex truncate, unknown behavior but used in RO
	@IspMult /= 100
	
	// get thrust ASL
	ThrustSLFraction = #$IspASL$
	@ThrustSLFraction /= #$IspVac$
	@ThrustSLFraction += 0.005
	@ThrustSLFraction *= 100
	@ThrustSLFraction = #$ThrustSLFraction[0,.]$ // regex truncate, unknown behavior but used in RO
	@ThrustSLFraction /= 100
	
	IspVacPLM = 800
	IspASLPLM = #$IspVacPLM$ // take vac Isp
	@IspASLPLM *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacPLM *= #$IspMult$ // scale Isp against default
	@IspASLPLM *= #$IspMult$ // scale Isp against default
	Isp3rdPLM = #$Isp3rd$
	@Isp3rdPLM *= 1 // 800 / 800 (scale 3rd Isp key's value by this fuel / LPLM Isp)
	ThrustVacPLM = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacPLM *= 1 // scale thrust against first mode's maxThrust
	ThrustASLPLM = #$ThrustVacPLM$ // get scaled vac thrust
	@ThrustASLPLM *= #$ThrustSLFraction$ // get scaled SL thrust
	
	IspVacRPT = 606
	IspASLRPT = #$IspVacRPT$
	@IspASLRPT *= #$ThrustSLFraction$
	@IspVacRPT *= #$IspMult$
	@IspASLRPT *= #$IspMult$
	Isp3rdRPT = #$Isp3rd$
	@Isp3rdRPT *= 0.758 // 606 / 800
	ThrustVacRPT = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacRPT *= 1.23
	ThrustASLRPT = #$ThrustVacRPT$
	@ThrustASLRPT *= #$ThrustSLFraction$
	
	IspVacN2 = 253
	IspASLN2 = #$IspVacN2$
	@IspASLN2 *= #$ThrustSLFraction$
	@IspVacN2 *= #$IspMult$
	@IspASLN2 *= #$IspMult$
	Isp3rdN2 = #$Isp3rd$
	@Isp3rdN2 *= 0.326 // 261 / 800
	ThrustVacN2 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacN2 *= 2.37
	ThrustASLN2 = #$ThrustVacN2$
	@ThrustASLN2 *= #$ThrustSLFraction$
	
	IspVacH2O = 370
	IspASLH2O = #$IspVacH2O$
	@IspASLH2O *= #$ThrustSLFraction$
	@IspVacH2O *= #$IspMult$
	@IspASLH2O *= #$IspMult$
	Isp3rdH2O = #$Isp3rd$
	@Isp3rdH2O *= 0.463 // 370 / 800
	ThrustVacH2O = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacH2O *= 1.78
	ThrustASLH2O = #$ThrustVacH2O$
	@ThrustASLH2O *= #$ThrustSLFraction$
	
	IspVacCO2 = 283
	IspASLCO2 = #$IspVacCO2$ // take vac Isp
	@IspASLCO2 *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacCO2 *= #$IspMult$ // scale Isp against default
	@IspASLCO2 *= #$IspMult$ // scale Isp against default
	Isp3rdCO2 = #$Isp3rd$
	@Isp3rdCO2 *= 0.354 // 283 / 800 (scale 3rd Isp key's value by this fuel / LH2 Isp)
	ThrustVacCO2 = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacCO2 *= 2.18 // scale thrust against first mode's maxThrust
	ThrustASLCO2 = #$ThrustVacCO2$ // get scaled vac thrust
	@ThrustASLCO2 *= #$ThrustSLFraction$ // get scaled SL thrust
	
	!MODULE[ModuleAlternator],* {}
	@MODULE[ModuleEnginesFX],0
	{
		!PROPELLANT,* {}
		PROPELLANT
		{
			name = Propellium
			ratio = 1
			DrawGauge = True
			ignoreForThrustCurve = True
			resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		PROPELLANT
		{
			name = ThermalPower
			ratio = 9.2574
			@ratio *= #$/IspMult$
			DrawGauge = True
			ignoreForIsp = True
			resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		@atmosphereCurve
		{
			@key,0[1, ] = #$/IspVacH2$
			@key,1[1, ] = #$/IspASLH2$
			@key,2[1, ] = #$/Isp3rdH2$
		}
		%useThrustCurve = True
		%thrustCurve
		{
			!key,* = nope
			key = 0.1 0.1
			key = 0.8 1 0 0
		}
	}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = Propellant
		switcherDescription = Propellant
		switcherDescriptionPlural = Propellant Options
		switchInFlight = True
		SUBTYPE
		{
			name = Propellium
			title = Propellium
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorLqdHydrogen
			descriptionSummary = The engine consumes <color="yellow">Propellium</color>.<br>This is the highest efficiency, baseline option for NTRs.
			descriptionDetail = #<b>Thrust:</b> $/ThrustASLPLM$ / $/ThrustVacPLM$ kN.<br><b>Isp:</b> $/IspASLPLM$ / $/IspVacPLM$ s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacPLM$
					PROPELLANT
					{
						name = Propellium
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = ThermalPower
						ratio = 9.2574
						@ratio *= #$/IspMult$
						DrawGauge = True
						ignoreForIsp = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacPLM$
						@key,1[1, ] = #$/IspASLPLM$
						@key,2[1, ] = #$/Isp3rdPLM$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Raptium
			title = Raptium
			primaryColor = PurpleyPink
			secondaryColor = PurpleyPink
			descriptionSummary = The engine consumes <color="yellow">Raptium</color>.<br>This option trades a very modest portion of efficiency for thrust but makes use of the highly demanded alternative propellant for launchers and boosters.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLRPT$ / $/ThrustVacRPT$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLRPT$ / $/IspVacRPT$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacRPT$
					PROPELLANT
					{
						name = Raptium
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = ThermalPower
						ratio = 34.2727
						@ratio *= #$/IspMult$
						DrawGauge = True
						ignoreForIsp = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacRPT$
						@key,1[1, ] = #$/IspASLRPT$
						@key,2[1, ] = #$/Isp3rdRPT$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Water
			title = Water
			primaryColor = Ocean
			secondaryColor = Ocean
			descriptionSummary = The engine consumes <color="yellow">Water</color>.<br>This is the more economical high thrust option, immediately superior in performance to the likes of the LV-303 and LV-909 LFO engines. 
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLH2O$ / $/ThrustVacH2O$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLH2O$ / $/IspVacH2O$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacH2O$
					PROPELLANT
					{
						name = Water
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = ThermalPower
						ratio = 14.4598
						@ratio *= #$/IspMult$
						DrawGauge = True
						ignoreForIsp = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacH2O$
						@key,1[1, ] = #$/IspASLH2O$
						@key,2[1, ] = #$/Isp3rdH2O$
					}
				}
			}
		}
		SUBTYPE:NEEDS[SnacksFreshAir]
		{
			name = FreshAir
			title = Fresh Air
			primaryColor = CadetBlue
			secondaryColor = CadetBlue
			descriptionSummary = The engine consumes <color="yellow">FreshAir</color>.<br>This option is on the weirder and desperate side but whatever works... Pray that it's never needed.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLN2$ / $/ThrustVacN2$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLN2$ / $/IspVacN2$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacN2$
					PROPELLANT
					{
						name = FreshAir
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacN2$
						@key,1[1, ] = #$/IspASLN2$
						@key,2[1, ] = #$/Isp3rdN2$
					}
				}
			}
		}
		SUBTYPE
		{
			name = CompressedAtmosphere
			title = Compressed Atmosphere
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionSummary = The engine consumes <color="yellow">CompressedAtmosphere</color>.<br>CompressedAtmosphere as a propellant may be very poor in terms of Isp, but any atmosphere is fuel, and that's always good.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLCO2$ / $/ThrustVacCO2$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLCO2$ / $/IspVacCO2$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacCO2$
					PROPELLANT
					{
						name = CompressedAtmosphere
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = ThermalPower
						ratio = 21.2177
						@ratio *= #$/IspMult$
						DrawGauge = True
						ignoreForIsp = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
						@key,2[1, ] = #$/Isp3rdCO2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[SnacksFreshAir]
		{
			name = StaleAir
			title = Stale Air
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionSummary = The engine consumes <color="yellow">StaleAir</color>...<br> Stale Air, right?
			descriptionDetail = #<b>Thrust:</b> $/ThrustASLCO2$ / $/ThrustVacCO2$ kN.<br><b>Isp:</b> $/IspASLCO2$ / $/IspVacCO2$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacCO2$
					PROPELLANT
					{
						name = StaleAir
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
						@key,2[1, ] = #$/Isp3rdCO2$
					}
				}
			}
		}
	}
}

// Dual-mode engines; Affect only closed cycle mode unless also RRLATN
@PART:HAS[#RRTN[Yes],@MODULE[ModuleEngines*],@MODULE[MultiModeEngine]]:NEEDS[ClassicStock,!CommunityResourcePack]:FOR[RationalResourcesNuclearFamily]
{
	@description ^= :$: <br><#fc5a50>RR Thermal Nozzle.</color> // Dark Magenta
	@RRTN = Joined
	@tags ^= :$: cck-rr
	
	IspVac = #$MODULE[ModuleEnginesFX],1/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleEnginesFX],1/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	Isp3rd = #$MODULE[ModuleEnginesFX],1/atmosphereCurve/key,2[1, ]$
	IspMult = #$IspVac$ // set numerator for div operation
	@IspMult /= 800 // denominator, the highest vac Isp number among all targeted parts
	
	// precision sequence to keep div number at 2dp and not let it be 12+dp
	@IspMult += 0.005
	@IspMult *= 100
	@IspMult = #$IspMult[0,.]$ // regex truncate, unknown behavior but used in RO
	@IspMult /= 100
	
	// get thrust ASL
	ThrustSLFraction = #$IspASL$
	@ThrustSLFraction /= #$IspVac$
	@ThrustSLFraction += 0.005
	@ThrustSLFraction *= 100
	@ThrustSLFraction = #$ThrustSLFraction[0,.]$ // regex truncate, unknown behavior but used in RO
	@ThrustSLFraction /= 100
	
	IspVacH2 = 800
	IspASLH2 = #$IspVacH2$ // take vac Isp
	@IspASLH2 *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacH2 *= #$IspMult$ // scale Isp against default
	@IspASLH2 *= #$IspMult$ // scale Isp against default
	Isp3rdH2 = #$Isp3rd$
	@Isp3rdH2 *= 1 // 800 / 800 (scale 3rd Isp key's value by this fuel / LH2 Isp)
	ThrustVacH2 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacH2 *= 1 // scale thrust against first mode's maxThrust
	ThrustASLH2 = #$ThrustVacH2$ // get scaled vac thrust
	@ThrustASLH2 *= #$ThrustSLFraction$ // get scaled SL thrust
	
	IspVacCO = 253
	IspASLCO = #$IspVacCO$ // take vac Isp
	@IspASLCO *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacCO *= #$IspMult$ // scale Isp against default
	@IspASLCO *= #$IspMult$ // scale Isp against default
	Isp3rdCO = #$Isp3rd$
	@Isp3rdCO *= 0.316 // 253 / 800 (scale 3rd Isp key's value by this fuel / LH2 Isp)
	ThrustVacCO = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacCO *= 2.37 // scale thrust against first mode's maxThrust
	ThrustASLCO = #$ThrustVacCO$ // get scaled vac thrust
	@ThrustASLCO *= #$ThrustSLFraction$ // get scaled SL thrust
	
	IspVacNH3 = 400
	IspASLNH3 = #$IspVacNH3$
	@IspASLNH3 *= #$ThrustSLFraction$
	@IspVacNH3 *= #$IspMult$
	@IspASLNH3 *= #$IspMult$
	Isp3rdNH3 = #$Isp3rd$
	@Isp3rdNH3 *= 0.5 // 400 / 800
	ThrustVacNH3 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacNH3 *= 1.68
	ThrustASLNH3 = #$ThrustVacNH3$
	@ThrustASLNH3 *= #$ThrustSLFraction$
	
	IspVacN2 = 253
	IspASLN2 = #$IspVacN2$
	@IspASLN2 *= #$ThrustSLFraction$
	@IspVacN2 *= #$IspMult$
	@IspASLN2 *= #$IspMult$
	Isp3rdN2 = #$Isp3rd$
	@Isp3rdN2 *= 0.326 // 261 / 800
	ThrustVacN2 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacN2 *= 2.37
	ThrustASLN2 = #$ThrustVacN2$
	@ThrustASLN2 *= #$ThrustSLFraction$
	
	IspVacCH4 = 606
	IspASLCH4 = #$IspVacCH4$
	@IspASLCH4 *= #$ThrustSLFraction$
	@IspVacCH4 *= #$IspMult$
	@IspASLCH4 *= #$IspMult$
	Isp3rdCH4 = #$Isp3rd$
	@Isp3rdCH4 *= 0.758 // 606 / 800
	ThrustVacCH4 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacCH4 *= 1.23
	ThrustASLCH4 = #$ThrustVacCH4$
	@ThrustASLCH4 *= #$ThrustSLFraction$
	
	IspVacCO2 = 283
	IspASLCO2 = #$IspVacCO2$ // take vac Isp
	@IspASLCO2 *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacCO2 *= #$IspMult$ // scale Isp against default
	@IspASLCO2 *= #$IspMult$ // scale Isp against default
	Isp3rdCO2 = #$Isp3rd$
	@Isp3rdCO2 *= 0.354 // 283 / 800 (scale 3rd Isp key's value by this fuel / LH2 Isp)
	ThrustVacCO2 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacCO2 *= 2.18 // scale thrust against first mode's maxThrust
	ThrustASLCO2 = #$ThrustVacCO2$ // get scaled vac thrust
	@ThrustASLCO2 *= #$ThrustSLFraction$ // get scaled SL thrust
	
	IspVacH2O = 370
	IspASLH2O = #$IspVacH2O$
	@IspASLH2O *= #$ThrustSLFraction$
	@IspVacH2O *= #$IspMult$
	@IspASLH2O *= #$IspMult$
	Isp3rdH2O = #$Isp3rd$
	@Isp3rdH2O *= 0.463 // 370 / 800
	ThrustVacH2O = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacH2O *= 1.78
	ThrustASLH2O = #$ThrustVacH2O$
	@ThrustASLH2O *= #$ThrustSLFraction$

	@MODULE[MultiModeEngine]
	{
		@primaryEngineID = IntakeAtm
		%primaryEngineModeDisplayName = RR_ThermalJet
		@secondaryEngineID = LqdCO2
		%secondaryEngineModeDisplayName = RR_Closed
	}
	
	@MODULE[ModuleEnginesFX],0
	{
		%engineID = IntakeAtm
	//	!PROPELLANT,* {}	//Dont want to Modify Airbreathing mode aside from adjusting its engineID to match MultiMode ID's
	//	PROPELLANT
	//	{
	//		name = IntakeAtm
	//		// ignoreForIsp = True
	//		ratio = 1
	//		DrawGauge = True
	//	}
	//	PROPELLANT
	//	{
	//		name = ThermalPower
	//		ratio = 196.133
	//		ignoreForIsp = True
	//		DrawGauge = True
	//		resourceFlowMode = STAGE_PRIORITY_FLOW
	//	}
	//	@atmosphereCurve
	//	{
	//		!key,* = nope
	//		key = 0 2000 0 0 
	//	}
	//	@atmCurve
	//	{
	//		!key,* = nope
	//		key = 0 0.5
	//		key = 1 1 0.45 0.45
	//		key = 30 6 0 0
	//	}
	//	%useThrustCurve = True
	//	thrustCurve
	//	{
	//		key = 0 0.25
	//		key = 0.8 1 0 0
	//	}
	}
	
	@MODULE[ModuleEnginesFX],1
	{
		%engineID = PLM
		!PROPELLANT,* {}	//If we dont wipe out existing propellants, we might end up requiring oxidizer if the original engine config.
		PROPELLANT,0
		{
			name = Propellium
			ratio = 1
			DrawGauge = True
			ignoreForThrustCurve = True
			resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		PROPELLANT
		{
			name = ThermalPower
			ratio = 1.88149
			ratio *= #$/IspMult$
			DrawGauge = True
			IgnoreForIsp = True
			resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		@atmosphereCurve
		{
			@key,0[1, ] = #$/IspVacH2$
			@key,1[1, ] = #$/IspASLH2$
			@key,2[1, ] = #$/Isp3rdH2$
		}
		%useThrustCurve = True
		%thrustCurve
		{
			!key,* = nope
			key = 0.1 0.1
			key = 0.8 1 0 0
		}
	}
	
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = Propellant
		switcherDescription = Propellant
		switcherDescriptionPlural = Propellant Options
		switchInFlight = True
		SUBTYPE
		{
			name = Propellium
			title = Propellium
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorLqdHydrogen
			descriptionSummary = The engine consumes <color="yellow">Propellium</color>.<br>This is the highest efficiency, baseline option for NTRs.
			descriptionDetail = #<b>Thrust:</b> $/ThrustASLPLM$ / $/ThrustVacPLM$ kN.<br><b>Isp:</b> $/IspASLPLM$ / $/IspVacPLM$ s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacPLM$
					PROPELLANT
					{
						name = Propellium
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacPLM$
						@key,1[1, ] = #$/IspASLPLM$
						@key,2[1, ] = #$/Isp3rdPLM$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Raptium
			title = Raptium
			primaryColor = PurpleyPink
			secondaryColor = PurpleyPink
			descriptionSummary = The engine consumes <color="yellow">Raptium</color>.<br>This option trades a very modest portion of efficiency for thrust but makes use of the highly demanded alternative propellant for launchers and boosters.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLRPT$ / $/ThrustVacRPT$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLRPT$ / $/IspVacRPT$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacRPT$
					PROPELLANT
					{
						name = Raptium
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacRPT$
						@key,1[1, ] = #$/IspASLRPT$
						@key,2[1, ] = #$/Isp3rdRPT$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Water
			title = Water
			primaryColor = Ocean
			secondaryColor = Ocean
			descriptionSummary = The engine consumes <color="yellow">Water</color>.<br>This is the more economical high thrust option, immediately superior in performance to the likes of the LV-303 and LV-909 LFO engines. 
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLH2O$ / $/ThrustVacH2O$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLH2O$ / $/IspVacH2O$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacH2O$
					PROPELLANT
					{
						name = Water
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacH2O$
						@key,1[1, ] = #$/IspASLH2O$
						@key,2[1, ] = #$/Isp3rdH2O$
					}
				}
			}
		}
		SUBTYPE:NEEDS[SnacksFreshAir]
		{
			name = FreshAir
			title = Fresh Air
			primaryColor = CadetBlue
			secondaryColor = CadetBlue
			descriptionSummary = The engine consumes <color="yellow">FreshAir</color>.<br>This option is on the weirder and desperate side but whatever works... Pray that it's never needed.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLN2$ / $/ThrustVacN2$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLN2$ / $/IspVacN2$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacN2$
					PROPELLANT
					{
						name = FreshAir
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacN2$
						@key,1[1, ] = #$/IspASLN2$
						@key,2[1, ] = #$/Isp3rdN2$
					}
				}
			}
		}
		SUBTYPE
		{
			name = CompressedAtmosphere
			title = Compressed Atmosphere
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionSummary = The engine consumes <color="yellow">CompressedAtmosphere</color>.<br>CompressedAtmosphere as a propellant may be very poor in terms of Isp, but any atmosphere is fuel, and that's always good.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLCO2$ / $/ThrustVacCO2$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLCO2$ / $/IspVacCO2$</color> s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacCO2$
					PROPELLANT
					{
						name = CompressedAtmosphere
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
						@key,2[1, ] = #$/Isp3rdCO2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[SnacksFreshAir]
		{
			name = StaleAir
			title = Stale Air
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionSummary = The engine consumes <color="yellow">StaleAir</color>...<br> Stale Air, right?
			descriptionDetail = #<b>Thrust:</b> $/ThrustASLCO2$ / $/ThrustVacCO2$ kN.<br><b>Isp:</b> $/IspASLCO2$ / $/IspVacCO2$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacCO2$
					PROPELLANT
					{
						name = StaleAir
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
						@key,2[1, ] = #$/Isp3rdCO2$
					}
				}
			}
		}
	}
}

// Affect air-breathing mode if rocket, not fan
@PART:HAS[#RRLATN[Yes],@MODULE[ModuleEngines*],@MODULE[MultiModeEngine]]:NEEDS[ClassicStock,!CommunityResourcePack]:FOR[RationalResourcesNuclearFamily]
{
	@RRLATN = Joined
	@MODULE[ModuleEnginesFX],0
	{
		!PROPELLANT,* {}
		PROPELLANT
		{
			name = IntakeAtm
			// ignoreForIsp = True
			ratio = 1
			DrawGauge = True
		}
		PROPELLANT
		{
			name = ThermalPower
			ratio = 196.133
			ignoreForIsp = True
			DrawGauge = True
			resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		@atmosphereCurve
		{
			!key,* = nope
			key = 0 2000 0 0 
		}
		@atmCurve
		{
			!key,* = nope
			key = 0 0.5
			key = 1 1 0.45 0.45
			key = 30 6 0 0
		}
		%useThrustCurve = True
		thrustCurve
		{
			key = 0 0.25
			key = 0.8 1 0 0
		}
	}
}


// - - - - - - System Heat



// Single mode
@PART:HAS[#RRTN[Yes],@MODULE[ModuleEngines*],!MODULE[MultiModeEngine]]:FOR[RationalResourcesNuclearFamily]:NEEDS[SystemHeat]
{
	@MODULE[ModuleEngines*],*
	{
		@heatProduction = 0
	}
	MODULE
	{
		name = ModuleSystemHeat
		volume = #$/mass$
		@volume /= 3
		moduleID = engine
		iconName = Icon_Atom
	}
	MODULE
	{
		name = ModuleSystemHeatEngine
		moduleID = engineHeat
		systemHeatModuleID = engine
		engineModuleID = basicEngine
		systemPower = 2000
		@systemPower *= #$/IspMult$
		systemOutletTemperature = 1300
		shutdownTemperature = 1600
		temperatureCurve
		{
			key = 0 1
			key = 1300 1
		}
	}
}

// Dual mode
@PART:HAS[#RRTN[Yes],@MODULE[ModuleEngines*],@MODULE[MultiModeEngine]]:FOR[RationalResourcesNuclearFamily]:NEEDS[SystemHeat]
{
	ThrustModeDiff = #$/MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustModeDiff /= #$/MODULE[ModuleEnginesFX],0/maxThrust$
	
	@MODULE[ModuleEngines*],*
	{
		@heatProduction = 0
	}
	MODULE
	{
		name = ModuleSystemHeat
		volume = #$/mass$
		@volume /= 3
		moduleID = engine
		iconName = Icon_Atom
	}
	MODULE
	{
		name = ModuleSystemHeatEngine
		moduleID = engineHeat
		systemHeatModuleID = engine
		engineModuleID = #$/MODULE[ModuleEnginesFX],0/engineID$
		systemPower = 2000
		@systemPower *= #$/IspMult$
		systemOutletTemperature = 1300
		shutdownTemperature = 1600
		temperatureCurve
		{
			key = 0 1
			key = 1300 1
		}
	}
	MODULE
	{
		name = ModuleSystemHeatEngine
		moduleID = engineHeat
		systemHeatModuleID = engine
		engineModuleID = #$/MODULE[ModuleEnginesFX],1/engineID$
		systemPower = 2000
		@systemPower *= #$/IspMult$
		@systemPower *= #$/ThrustModeDiff$
		systemOutletTemperature = 1300
		shutdownTemperature = 1600
		temperatureCurve
		{
			key = 0 1
			key = 1300 1
		}
	}
}


// - - - - - Clean-up


@PART:HAS[#RRTN[Joined]]:AFTER[RationalResourcesNuclearFamily]
{
	!Isp* = nope
	!Thrust* = nope
	!nuc* = nope
}