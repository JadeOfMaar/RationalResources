@PART[RREngineNERVA-O]:NEEDS[ClassicStock]
{
	IspVac = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	Isp3rd = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,2[1, ]$
	IspMult = #$IspVac$ // set numerator for div operation
	@IspMult /= 800 // denominator, the highest vac Isp number among all targeted parts
	
	// precision sequence to keep div number at 2dp and not let it be 12+dp
	@IspMult += 0.005
	@IspMult *= 100
	@IspMult = #$IspMult[0,.]$ // regex truncate, unknown behavior but used in RO
	@IspMult /= 100
	
	// get thrust ASL
	ThrustSLFraction = #$IspASL$
	@ThrustSLFraction /= #$IspVac$
	@ThrustSLFraction += 0.005
	@ThrustSLFraction *= 100
	@ThrustSLFraction = #$ThrustSLFraction[0,.]$ // regex truncate, unknown behavior but used in RO
	@ThrustSLFraction /= 100
	
	IspVacH2O = 370
	IspASLH2O = #$IspVacH2O$
	@IspASLH2O *= #$ThrustSLFraction$
	@IspVacH2O *= #$IspMult$
	@IspASLH2O *= #$IspMult$
	Isp3rdH2O = #$Isp3rd$
	@Isp3rdH2O *= 0.463 // 370 / 800
	ThrustVacH2O = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacH2O *= 0.76
	ThrustASLH2O = #$ThrustVacH2O$
	@ThrustASLH2O *= #$ThrustSLFraction$
	
	IspVacN2O = 253
	IspASLN2O = #$IspVacN2O$ // take vac Isp
	@IspASLN2O *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacN2O *= #$IspMult$ // scale Isp against default
	@IspASLN2O *= #$IspMult$ // scale Isp against default
	Isp3rdN2O = #$Isp3rd$
	@Isp3rdN2O *= 0.316 // 253 / 800 (scale 3rd Isp key's value by this fuel / LH2 Isp)
	ThrustVacN2O = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacN2O *= 1.15 // scale thrust against first mode's maxThrust
	ThrustASLN2O = #$ThrustVacN2O$ // get scaled vac thrust
	@ThrustASLN2O *= #$ThrustSLFraction$ // get scaled SL thrust
	
	IspVacCO2 = 283
	IspASLCO2 = #$IspVacCO2$ // take vac Isp
	@IspASLCO2 *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacCO2 *= #$IspMult$ // scale Isp against default
	@IspASLCO2 *= #$IspMult$ // scale Isp against default
	Isp3rdCO2 = #$Isp3rd$
	@Isp3rdCO2 *= 0.354 // 283 / 800 (scale 3rd Isp key's value by this fuel / LH2 Isp)
	ThrustVacCO2 = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacCO2 *= 1 // scale thrust against first mode's maxThrust
	ThrustASLCO2 = #$ThrustVacCO2$ // get scaled vac thrust
	@ThrustASLCO2 *= #$ThrustSLFraction$ // get scaled SL thrust
	
	@MODULE[MultiModeEngine]
	{
		@primaryEngineID = Water
		%primaryEngineModeDisplayName = RR_OxAgent
		@secondaryEngineID = LOxAugmented
		%secondaryEngineModeDisplayName = LOx_Augmented
	}
	@MODULE[ModuleEnginesFX],0
	{
		%engineID = Water
		@PROPELLANT,0
		{
			@name = Water
			@ratio = 1
			%DrawGauge = True
			%resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		@atmosphereCurve
		{
			@key,0[1, ] = #$/IspVacH2O$
			@key,1[1, ] = #$/IspASLH2O$
			@key,2[1, ] = #$/Isp3rdH2O$
		}
	}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = Propellant
		switcherDescription = Propellant
		switcherDescriptionPlural = Propellant Options
		switchInFlight = True
		SUBTYPE
		{
			name = Water
			title = Water
			primaryColor = Ocean
			secondaryColor = Ocean
			descriptionSummary = The engine consumes <color="yellow">Water</color>.<br>This is the more economical high thrust option, immediately superior in performance to the likes of the LV-303 and LV-909 LFO engines. 
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLH2O$ / $/ThrustVacH2O$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLH2O$ / $/IspVacH2O$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = Water
				}
				DATA
				{
					maxThrust = #$/ThrustVacH2O$
					PROPELLANT
					{
						name = Water
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacH2O$
						@key,1[1, ] = #$/IspASLH2O$
						@key,2[1, ] = #$/Isp3rdH2O$
					}
				}
			}
		}
		// SUBTYPE
		// {
			// name = Nitronite
			// title = Nitronite
			// primaryColor = ResourceColorMonoPropellant
			// secondaryColor = ResourceColorMonoPropellant
			// descriptionSummary = The engine consumes <color="yellow">Nitronite</color>.<br> Impulse is as good as the average LiquidFuel rocket, and a bonus to thrust is gained through the relatively reactive nature of this propellant, however, it is hard to come by in nature.
			// descriptionDetail = #<b>Thrust:</b> $/ThrustASLN2O$ / $/ThrustVacN2O$ kN.<br><b>Isp:</b> $/IspASLN2O$ / $/IspVacN2O$s.
			// MODULE
			// {
				// IDENTIFIER
				// {
					// name = ModuleEnginesFX
					// engineID = Water
				// }
				// DATA
				// {
					// maxThrust = #$/ThrustVacN2O$
					// PROPELLANT
					// {
						// name = Nitronite
						// ratio = 1
						// DrawGauge = True
						// resourceFlowMode = STAGE_PRIORITY_FLOW
					// }
					// #/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					// @atmosphereCurve
					// {
						// @key,0[1, ] = #$/IspVacN2O$
						// @key,1[1, ] = #$/IspASLN2O$
						// @key,2[1, ] = #$/Isp3rdN2O$
					// }
				// }
			// }
		// }
		SUBTYPE
		{
			name = CompressedAtmosphere
			title = Compressed Atmosphere
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionSummary = The engine consumes <color="yellow">CompressedAtmosphere</color>.<br>CompressedAtmosphere as a propellant may be very poor in terms of Isp, but any atmosphere is fuel, and that's always good.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLCO2$ / $/ThrustVacCO2$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLCO2$ / $/IspVacCO2$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = Water
				}
				DATA
				{
					maxThrust = #$/ThrustVacCO2$
					PROPELLANT
					{
						name = CompressedAtmosphere
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
						@key,2[1, ] = #$/Isp3rdCO2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[SnacksFreshAir]
		{
			name = StaleAir
			title = Stale Air
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionSummary = The engine consumes <color="yellow">StaleAir</color>...<br> Stale Air, right?
			descriptionDetail = #<b>Thrust:</b> $/ThrustASLCO2$ / $/ThrustVacCO2$ kN.<br><b>Isp:</b> $/IspASLCO2$ / $/IspVacCO2$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = Water
				}
				DATA
				{
					maxThrust = #$/ThrustVacCO2$
					PROPELLANT
					{
						name = StaleAir
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
						@key,2[1, ] = #$/Isp3rdCO2$
					}
				}
			}
		}
	}
	%MODULE[Emitter]:NEEDS[FeatureRadiation] // Kerbalism radioactivity
	{
		%radiation = 0.0000277775 // 0.1 rad/h
		@radiation *= #$/mass$
		@radiation /= 3 // stock NERVA ref mass
		Tag = RR
	}
}

@PART[RREngineNERVA-R]:NEEDS[ClassicStock]
{
	IspVac = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	Isp3rd = #$MODULE[ModuleEnginesFX],0/atmosphereCurve/key,2[1, ]$
	IspMult = #$IspVac$ // set numerator for div operation
	@IspMult /= 800 // denominator, the highest vac Isp number among all targeted parts
	
	// precision sequence to keep div number at 2dp and not let it be 12+dp
	@IspMult += 0.005
	@IspMult *= 100
	@IspMult = #$IspMult[0,.]$ // regex truncate, unknown behavior but used in RO
	@IspMult /= 100
	
	// get thrust ASL
	ThrustSLFraction = #$IspASL$
	@ThrustSLFraction /= #$IspVac$
	@ThrustSLFraction += 0.005
	@ThrustSLFraction *= 100
	@ThrustSLFraction = #$ThrustSLFraction[0,.]$ // regex truncate, unknown behavior but used in RO
	@ThrustSLFraction /= 100
	
	IspVacPLM = 800
	IspASLPLM = #$IspVacPLM$ // take vac Isp
	@IspASLPLM *= #$ThrustSLFraction$ // get SL Isp through SL thrust fraction
	@IspVacPLM *= #$IspMult$ // scale Isp against default
	@IspASLPLM *= #$IspMult$ // scale Isp against default
	Isp3rdPLM = #$Isp3rd$
	@Isp3rdPLM *= 1 // 800 / 800 (scale 3rd Isp key's value by this fuel / LPLM Isp)
	ThrustVacPLM = #$MODULE[ModuleEnginesFX],0/maxThrust$
	@ThrustVacPLM *= 1 // scale thrust against first mode's maxThrust
	ThrustASLPLM = #$ThrustVacPLM$ // get scaled vac thrust
	@ThrustASLPLM *= #$ThrustSLFraction$ // get scaled SL thrust
	
	IspVacRPT = 606
	IspASLRPT = #$IspVacRPT$
	@IspASLRPT *= #$ThrustSLFraction$
	@IspVacRPT *= #$IspMult$
	@IspASLRPT *= #$IspMult$
	Isp3rdRPT = #$Isp3rd$
	@Isp3rdRPT *= 0.758 // 606 / 800
	ThrustVacRPT = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacRPT *= 1.33
	ThrustASLRPT = #$ThrustVacRPT$
	@ThrustASLRPT *= #$ThrustSLFraction$
	
	IspVacN2 = 253
	IspASLN2 = #$IspVacN2$
	@IspASLN2 *= #$ThrustSLFraction$
	@IspVacN2 *= #$IspMult$
	@IspASLN2 *= #$IspMult$
	Isp3rdN2 = #$Isp3rd$
	@Isp3rdN2 *= 0.326 // 261 / 800
	ThrustVacN2 = #$MODULE[ModuleEnginesFX],1/maxThrust$
	@ThrustVacN2 *= 0.67
	ThrustASLN2 = #$ThrustVacN2$
	@ThrustASLN2 *= #$ThrustSLFraction$
	
	@MODULE[MultiModeEngine]
	{
		@primaryEngineID = PLM
		%primaryEngineModeDisplayName = RR_RedAgent
		@secondaryEngineID = LOxAugmented
		%secondaryEngineModeDisplayName = LOx_Augmented
	}
	@MODULE[ModuleEnginesFX],0
	{
		%engineID = PLM
		@PROPELLANT,0
		{
			@name = Propellium
			@ratio = 1
			%DrawGauge = True
			%resourceFlowMode = STAGE_PRIORITY_FLOW
		}
		@atmosphereCurve
		{
			@key,0[1, ] = #$/IspVacPLM$
			@key,1[1, ] = #$/IspASLPLM$
			@key,2[1, ] = #$/Isp3rdPLM$
		}
	}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = Propellant
		switcherDescription = Propellant
		switcherDescriptionPlural = Propellant Options
		switchInFlight = True
		SUBTYPE
		{
			name = Propellium
			title = Propellium
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorLqdHydrogen
			descriptionSummary = The engine consumes <color="yellow">Propellium</color>.<br>This is the highest efficiency, baseline option for NTRs.
			descriptionDetail = #<b>Thrust:</b> $/ThrustASLPLM$ / $/ThrustVacPLM$ kN.<br><b>Isp:</b> $/IspASLPLM$ / $/IspVacPLM$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacPLM$
					PROPELLANT
					{
						name = Propellium
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacPLM$
						@key,1[1, ] = #$/IspASLPLM$
						@key,2[1, ] = #$/Isp3rdPLM$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Raptium
			title = Raptium
			primaryColor = PurpleyPink
			secondaryColor = PurpleyPink
			descriptionSummary = The engine consumes <color="yellow">Raptium</color>.<br>This option trades a very modest portion of efficiency for thrust but makes use of the highly demanded alternative propellant for launchers and boosters.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLRPT$ / $/ThrustVacRPT$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLRPT$ / $/IspVacRPT$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacRPT$
					PROPELLANT
					{
						name = Raptium
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacRPT$
						@key,1[1, ] = #$/IspASLRPT$
						@key,2[1, ] = #$/Isp3rdRPT$
					}
				}
			}
		}
		SUBTYPE:NEEDS[SnacksFreshAir]
		{
			name = FreshAir
			title = Fresh Air
			primaryColor = CadetBlue
			secondaryColor = CadetBlue
			descriptionSummary = The engine consumes <color="yellow">FreshAir</color>.<br>This option is on the weirder and desperate side but whatever works... Pray that it's never needed.
			descriptionDetail = #<b>Thrust:</b> <color="yellow">$/ThrustASLN2$ / $/ThrustVacN2$</color> kN.<br><b>Isp:</b> <color="yellow">$/IspASLN2$ / $/IspVacN2$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
					engineID = PLM
				}
				DATA
				{
					maxThrust = #$/ThrustVacN2$
					PROPELLANT
					{
						name = FreshAir
						ratio = 1
						DrawGauge = True
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleEnginesFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacN2$
						@key,1[1, ] = #$/IspASLN2$
						@key,2[1, ] = #$/Isp3rdN2$
					}
				}
			}
		}
	}
	%MODULE[Emitter]:NEEDS[FeatureRadiation] // Kerbalism radioactivity
	{
		%radiation = 0.0000277775 // 0.1 rad/h
		@radiation *= #$/mass$
		@radiation /= 3 // stock NERVA ref mass
		Tag = RR
	}
}
